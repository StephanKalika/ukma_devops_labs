---
- name: Create recovery.conf file (for PostgreSQL < 12)
  template:
    src: recovery.conf.j2
    dest: /etc/postgresql/{{ postgres_version }}/replica/recovery.conf
    owner: postgres
    group: postgres
    mode: 0640
  when: postgres_version|int < 12

- name: Create standby.signal file (for PostgreSQL >= 12)
  file:
    path: /etc/postgresql/{{ postgres_version }}/replica/standby.signal
    state: touch
    owner: postgres
    group: postgres
    mode: 0640
  when: postgres_version|int >= 12

- name: Configure recovery parameters (for PostgreSQL >= 12)
  template:
    src: postgresql.auto.conf.j2
    dest: /etc/postgresql/{{ postgres_version }}/replica/postgresql.auto.conf
    owner: postgres
    group: postgres
    mode: 0640
  when: postgres_version|int >= 12

- name: Stop PostgreSQL on replica for base backup
  service:
    name: postgresql@{{ postgres_version }}-replica
    state: stopped

- name: Remove old data directory
  file:
    path: /var/lib/postgresql/{{ postgres_version }}/replica
    state: absent

- name: Create empty data directory
  file:
    path: /var/lib/postgresql/{{ postgres_version }}/replica
    state: directory
    owner: postgres
    group: postgres
    mode: 0700

- name: Take base backup from master
  become_user: postgres
  shell: |
    # Check if master is accessible
    if ! pg_isready -h {{ postgres_master_ip }} -p 5432; then
      echo "Master server is not ready. Exiting."
      exit 1
    fi
    
    # Try to take base backup
    pg_basebackup -h {{ postgres_master_ip }} -p 5432 -U {{ postgres_replication_user }} \
    -D /var/lib/postgresql/{{ postgres_version }}/replica \
    -P -R -X stream -S replica_slot \
    -C -W
  environment:
    PGPASSWORD: "{{ postgres_replication_password }}"
  args:
    executable: /bin/bash
  register: basebackup_result
  failed_when: false

- name: Display base backup result
  debug:
    var: basebackup_result.stdout_lines

- name: Check if base backup failed
  fail:
    msg: "Base backup failed: {{ basebackup_result.stderr }}"
  when: basebackup_result.rc != 0

- name: Start PostgreSQL replica cluster
  service:
    name: postgresql@{{ postgres_version }}-replica
    state: started
    enabled: yes

- name: Wait for PostgreSQL replica to be available
  wait_for:
    port: 5432
    state: started
    timeout: 30

- name: Check replication status
  become_user: postgres
  shell: psql -c "SELECT status FROM pg_stat_wal_receiver;"
  register: replication_status
  changed_when: false
  ignore_errors: yes

- name: Display replication status
  debug:
    var: replication_status.stdout_lines