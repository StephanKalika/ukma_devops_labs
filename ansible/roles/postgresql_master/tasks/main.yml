# roles/postgres_master/tasks/main.yml
---
- name: Configure PostgreSQL for replication
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: 0644
  notify: Restart PostgreSQL

- name: Configure pg_hba.conf for replication
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 0640
  notify: Restart PostgreSQL

- name: Create replication user
  become_user: postgres
  postgresql_user:
    name: "{{ replication_user }}"
    password: "{{ replication_password }}"
    role_attr_flags: REPLICATION,LOGIN
    state: present

- name: Create students database
  become_user: postgres
  postgresql_db:
    name: "{{ database_name }}"
    encoding: UTF8
    state: present

- name: Setup students database schema
  become_user: postgres
  postgresql_query:
    db: "{{ database_name }}"
    query: |
      CREATE TABLE IF NOT EXISTS students (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        date_of_birth DATE,
        enrollment_date DATE DEFAULT CURRENT_DATE
      );
      
      CREATE TABLE IF NOT EXISTS courses (
        id SERIAL PRIMARY KEY,
        course_name VARCHAR(100) NOT NULL,
        department VARCHAR(50) NOT NULL,
        credits INTEGER NOT NULL
      );
      
      CREATE TABLE IF NOT EXISTS enrollments (
        id SERIAL PRIMARY KEY,
        student_id INTEGER REFERENCES students(id),
        course_id INTEGER REFERENCES courses(id),
        enrollment_date DATE DEFAULT CURRENT_DATE,
        grade VARCHAR(2),
        UNIQUE(student_id, course_id)
      );
      
      -- Insert some sample data
      INSERT INTO students (first_name, last_name, email, date_of_birth)
      VALUES
        ('John', 'Doe', 'john.doe@example.com', '2000-01-15'),
        ('Jane', 'Smith', 'jane.smith@example.com', '1999-05-20'),
        ('Michael', 'Johnson', 'michael.j@example.com', '2001-03-10')
      ON CONFLICT (email) DO NOTHING;
      
      INSERT INTO courses (course_name, department, credits)
      VALUES
        ('Introduction to Computer Science', 'Computer Science', 3),
        ('Advanced Mathematics', 'Mathematics', 4),
        ('History of Art', 'Arts', 3)
      ON CONFLICT DO NOTHING;

- name: Force immediate restart of PostgreSQL
  service:
    name: postgresql
    state: restarted

- name: Get PostgreSQL data directory
  become_user: postgres
  command: psql -t -c "SHOW data_directory;"
  register: pg_data_dir
  changed_when: false

- name: Create slots directory if it doesn't exist
  file:
    path: "{{ pg_data_dir.stdout.strip() }}/replslot"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  when: pg_data_dir.stdout is defined

- name: Create replication slot
  become_user: postgres
  command: >
    psql -c "SELECT pg_create_physical_replication_slot('replica_slot');"
  register: create_slot_result
  failed_when: create_slot_result.rc != 0 and "already exists" not in create_slot_result.stderr
  changed_when: create_slot_result.rc == 0

- handlers:
    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted