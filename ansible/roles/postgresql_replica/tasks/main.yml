# roles/postgres_replica/tasks/main.yml
---
- name: Create new PostgreSQL cluster
  command: >
    pg_createcluster {{ postgresql_version }} {{ cluster_name }} 
    -p {{ port }} -d /var/lib/postgresql/{{ postgresql_version }}/{{ cluster_name }}
  register: createcluster_result
  failed_when: createcluster_result.rc != 0 and "already exists" not in createcluster_result.stderr
  changed_when: createcluster_result.rc == 0

- name: Stop PostgreSQL replica cluster
  service:
    name: "postgresql@{{ postgresql_version }}-{{ cluster_name }}"
    state: stopped
  ignore_errors: yes

- name: Clear replica data directory
  file:
    path: "/var/lib/postgresql/{{ postgresql_version }}/{{ cluster_name }}"
    state: absent
  when: createcluster_result.rc == 0 or "already exists" in createcluster_result.stderr

- name: Create replica data directory
  file:
    path: "/var/lib/postgresql/{{ postgresql_version }}/{{ cluster_name }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700

- name: Create recovery signal file
  file:
    path: "/var/lib/postgresql/{{ postgresql_version }}/{{ cluster_name }}/standby.signal"
    state: touch
    owner: postgres
    group: postgres
    mode: 0600

- name: Take base backup from master server
  become_user: postgres
  shell: >
    PGPASSWORD="{{ replication_password }}" pg_basebackup -h {{ master_ip }} -U {{ replication_user }} 
    -D /var/lib/postgresql/{{ postgresql_version }}/{{ cluster_name }} 
    -X stream -P -v -R -S replica_slot
  register: basebackup_result
  failed_when: basebackup_result.rc != 0
  changed_when: basebackup_result.rc == 0

- name: Configure PostgreSQL replica
  template:
    src: postgresql.conf.replica.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/{{ cluster_name }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: 0644

- name: Configure recovery settings
  template:
    src: postgresql.auto.conf.j2
    dest: "/var/lib/postgresql/{{ postgresql_version }}/{{ cluster_name }}/postgresql.auto.conf"
    owner: postgres
    group: postgres
    mode: 0600

- name: Start PostgreSQL replica cluster
  service:
    name: "postgresql@{{ postgresql_version }}-{{ cluster_name }}"
    state: started
    enabled: yes

- name: Wait for PostgreSQL replica to start
  wait_for:
    port: "{{ port }}"
    state: started
    timeout: 30

- name: Check replication status
  become_user: postgres
  shell: >
    PGPORT={{ port }} psql -c "SELECT pg_is_in_recovery();"
  register: replication_status
  changed_when: false

- name: Display replication status
  debug:
    msg: "Replication status: {{ replication_status.stdout }}"